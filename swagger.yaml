openapi: '3.0.0'
info:
  description: >-
    # Overview


    ### Vainu API enables user to integrate Vainu’s prospect information and leads to their CRM or other services.



    ## Datetime format

    All datetime values are in [ISO8601 format](https://en.wikipedia.org/wiki/ISO_8601).




    ## Status codes

    List of status and error codes and their definitions. TAULUKKO TÄMÄKIN, katso scraper/mongo_models/exceptions.py


    - `200` – SUCCESS, returns the requested data in JSON format

    - `401` – UNAUTHORIZED, Username and password doesn’t match. Check your password or username.

    - `403` – FORBIDDEN, API is not enabled for your account. Contact Vainu Support for more information.

    - `404` – NOT FOUND, data not found. Check business id.

    - `500` – Internal error. Contact Vainu Support for more information.


    # Authentication

    All parts of our API require authentication. We offer traditional HTTP basic access authentication and API key authentication.


    Additionally, API Permissions must be enabled on the user account that is used to authenticate API requests.


    Successful authentication allows access to corresponding resources as the used user credentials include.


    ### Basic Access authentication

    Basic access authentication – commonly referred to as "basic auth" or HTTP authentication – uses the same login credentials as the web interface.


    Simply add Authorization header to your request with a base64 encoded username and password.

    *Example header:*

    `Authorization: Basic <base64(username:password)>`.


    ### API Key authentication

    > To authorize, use this code:

    *Example:*


    ```
    API-Key: c031d56b97320ab3c0690850d52d8059d998f4d7851b3c15e2586b5594745aee
    ```


    API keys are obtained through the web interface. In order to generate an API key in the first place, user must have API permissions enabled. Currently three simultaneously active keys per user are allowed.


    To generate new API keys and list existing ones, go to Settings and open API Keys -tab. This page lists all active API keys generated by the user and allows fetching their corresponding API tokens.


    Deleting keys (and thus preventing their further use) is also possible through this page. API keys also track some information about their use that is displayed on this page.



  version: 1.0.0
  title: Vainu API
#  termsOfService: 'http://swagger.io/terms/'
#  contact:
#    email:

servers:
  - url: https://api.vainu.io/api/v1/
  #- url: /api/v1

security:
  - API-Key: []
  - basic: []

tags:
  - name: customer_data
    description: >-
      The customer_data API allows you to store data about customers (prospects) in the Vainu database, so that it can be used in the Vainu website to aid in various tasks. It also serves as a link between the prospects in your own database, and the ones in Vainu's database.

      ## Configuring Customer API integration

      To allow more comprehensive integration features on our end – such as exporting prospect data directly from the Vainu UI and displaying customizable Customer Data – some configurable functionality is offered on Vainu.

      These configurations can be accessed via Settings and the Integrations -tab. If the user has the correct permissions enabled, a section named Customer API Configuration is visible at the top of the page.


      *The configurable values are:*


      - `Endpoint name` -		A name that our interface should user to refer to your integration.


      - `Endpoint URL` -		URL address (of your API endpoint) where data export requests should be sent. This endpoint should accept data in JSON formatted payloads. To see what the data contains, see the example below.


      - `Create Customer Data entity` -	Generate and save Customer Data when executing exports via the interface, see Customer Data API part of this documentation. If this is toggled on each request will also contain the unique identifier of the newly created entity as a parameter named 'id'. This value works in conjunction with the next one, see details below.


      - `Wait for API response` -	Define whether Vainu's end should wait a response from your API endpoint when executing export. This allows e.g. responding with a HTTP status code denoting the result of the request (201/200 or 400/500 for example). It's also possible to send the unique identifier on the object on your end in the response, as payload parameter 'unique_id'. Additionally, if Create Customer Data entity is toggled on but the request fails, the Customer Data will not be created and the already sent 'id' will be void.


      - `Response timeout` -	How long to wait for customer API response before timeouting and assuming failure. Currently defaults to 3 seconds.


      - `Activity Feed URL` -	URL address (of your API endpoint) from where Vainu's interface attempts to fetch activity data based on your Customer Data entity. Specify the location of your unique identifier in the URL with '{}' -marking. See details from the subheader Activity Feed.


      - `Fetch activity feed` -	Toggle whether a request should be sent to the Activity Feed URL when opening a Prospect card in Vainu. The request is only sent if 1) Activity Feed URL is correctly defined 2) Customer Data entity exists and contains the unique_id and 3) Authentication is configured.


      - `Base URL for links` -	Create direct links to your external service from prospect cards by using this url as the base and appending the entity's unique_id to the string. Specify the location of your unique_id in the URL with '{}' -marking.


      - `Auth header` - Enter a header to be used when making requests to your service, to use for authentication.


      ### Exporting data

      Exporting data is possible through Vainu's UI when the endpoint is defined by pressing the corresponding export button on prospect cards. The data contains prospect, contact and/or lead information much in the same format as Public Prospect API displays it.


      ### Activity Feed

      >   An example of a valid activity feed response that is used to render information about the prospect on the prospect's page in Vainu (the example shows different kinds of valid objects):


      ```
          [
              {
                  "timestamp": "2018-05-04T07:11:26.000Z",
                  "id": "39acd9dc9a9db",
                  "header": "Email",
                  "text": "Description of the email",
                  "type": "email",
                  "hide_time": false,
                  "user_email": "example@vainu.io",
                  "icon": "email"
              },
              {
                  "timestamp": "2018-05-04",
                  "value": 2000,
                  "probability_percent": 20,
                  "currency": "EUR",
                  "text": "description of opportunity",
                  "type": "open",
                  "id": "28acd9dc9a9dc",
                  "user_email": "example@vainu.io"
              },
              {
                  "timestamp": "2019-05-04",
                  "hide_time": true,
                  "text": "This is a note for prospect with unique_id: lk2lk23",
                  "type": "note",
                  "id": "11acd9dc9a911",
                  "user_email": "example@vainu.io"
              },
              {
                  "timestamp": 1497945068,
                  "value": 2000,
                  "header": "Victory",
                  "text": "description of won deal",
                  "type": "won",
                  "id": "bbacd9dc9a9aa",
                  "user_email": "example@vainu.io"
              },
              {
                  "timestamp": 1497945061000,
                  "value": 2000,
                  "text": "description of lost deal",
                  "type": "lost",
                  "id": "ccacd9dc9a999",
                  "user_email": "example@vainu.io"
              },
              {
                  "timestamp": 1497945061000,
                  "location": "Helsinki",
                  "text": "description of meeting",
                  "type": "meeting",
                  "id": "ccacd9dc9a999",
                  "user_email": "example@vainu.io"
              }
          ]
      ```


      Activity Feed allows displaying custom data on Vainu's UI regarding the latest activity with a customer. This includes events like phone calls, meetings, e-mails, notes, lost/won deals, etc...

      Activity Feed is fetched real time for always displaying up-to-date information and to eliminate the need for saving this possibly delicate data on our end.

      In order to fetch and display activity data, the configurations should be correctly defined and your endpoint needs to return a json array of objects describing recent events relating to the prospect.


      The Activity Feed URL is defined as follows:


      Activity feed URL in your Vainu settings:


      `https://your.external.service/Entity/{}/details`


      When user opens a prospect card with associated Customer Data that has unique_id value of
      123-abc, a request is sent to the parsed address


      `https://your.external.service/Entity/123-abc/details`




      ###  A description of the properties of the event objects:

      - `id` - The unique id of the event. Required

      - `timestamp` - Used to sort the events. Accepts ISO 8601 (string) and unix time (seconds/milliseconds integer). Required

      - `type` - Possible values: email, call, activity, task, meeting, event, case, note, won, lost, open. Sets default values for other properties.

      - `user_email` - Represents the owner of the event. Does not necessarily have to be an email address.

      - `text` - The description of the event.

      - `location` - Can be included as the location of the event. Is shown as @location

      - `hide_time` - If true, hides the time from the ui. Does not effect sorting.

      - `icon` - The name of the icon to be displayed next to the event. The default value depends on `type`. Possible values: task, meeting, call, e_meeting, email, deadline, lunch, won, lost, open, note, textnote, assignment

      - `header` - The name of the type of event. The default value depends on `type`. To not display a header, do not include a header or type.

      Used only if type is won, lost, or open:

      - `value` - Value of opportunity.

      - `currency` - Currency code. Is displayed as text in the ui.

      - `probability_percent` - The probability of closing. If provided, is displayed as a part of the header.


      ## Modifying queries


      ### Query parameters


      The GET, PATCH and DELETE methods of the /customer_data/ endpoint support various query parameters that allow you to filter the results of the operations. In addition to the parameters that are listed, it is possible to append the parameter names with one of the following to filter based on other than equality
      <br/>(for example `?won_deals_count__gte=3`):


      - `__gt` (greater than)


      - `__gte` (greater than or equal)


      - `__lt` (less than)


      - `__lte` (less than or equal)


      - `__ne` (not equal)


      ### Ordering

      Use the query parameter `ordering` to sort based on a field. A minus sign reverses the order. For example:



      `?ordering=-open_deals_count`


      ### Pagination

      By default 100 results are shown per page. This can be modified by using the `page_size` parameter, and the page number can be specified with the `page` parameter. A maximum of 500 results per page is supported. Results include links to the next and previous pages, and `null` if no more pages are available.




  - name: async_result
    description: >-
                View the status of creating multiple customer_data objects with POST /customer_data/, or stop a resulting process.


  - name: prospect
    description:

  - name: prospects filter
    description:

  - name: target_groups
    description:

  - name: target_group
    description:

# externalDocs:
#   description: Find out more at
#   url: 'http://vainu.io'
paths:
  /customer_data/:
    post:
      tags:
        - customer_data
      summary: Create customer_data object by matching with a vainu prospect
      operationId: Create customer_data object
      description: >-

        Save data into the object and match with a prospect in the vainu database.


        The customer_data object will be linked to a prospect based on the matching parameters that are included in the request body. Only one customer_data object is allowed for each prospect. A request body must include a matching parameter.


        ### The possible matching parameters, ordered by matching priority:
          1. `vid` (the Vainu id of the prospect)
          2. `business_id`
          3. `exact_name`
          4. `normalize_name`

        Only one of these matching parameters is used to find the correct prospect. If more than one is given, only the one with the highest priority is taken into account.

        Additional parameters can be given to narrow down the number of possible matches:


        - `country`


        - `city`


        - `municipality`


        ### Descriptions of the matching parameters:

        ### `vid`:

        The vainu id is the unique integer identifier of every prospect. It can be found, for example in the url when viewing the prospect on Vainu's website. Matching with a vainu id will always match one or zero prospects, so any additional matching parameters will be ignored.

        ### `business_id`:

        It is highly recommended to include the country of the business to avoid matching businesses with the same id in other countries. The format of this parameter varies depending on the country.

        ### `exact_name`:

        The exact name of the business as found on Vainu's website.
        Case insensitive.

        ### `normalize_name`:

        The value given is converted to a normalized form, where common endings and prefixes are stripped. The conversion depends on the given country, so for accurate results, a country should be given. A name without endings is kept as is.


        The converted value is then matched with normalized names in Vainu's database. Using this parameter often fails to find a unique match, but this may be desired behaviour if a prospect in a CRM should be matched with multiple prospects in Vainu, or if the user should manually select the best match.
        Case insensitive.

        ### `country`:

        A two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)) of the prospect. Case insensitive.

        ### Multiple possible matches:

        If the given parameters return multiple matches, an error is returned that includes a list of possible matches.

        If matching with one or more of the returned prospects is desired, it is recommended to use the given `vid` s to send more requests.


        ### Create multiple customer_data object with one asynchronous request:

        Initiating the creation of multiple customer_data object is done in the same way as for single customer_data object, but instead of a single object, the request body should include an array of the same objects as when creating single customer_data object.

        The response does not include the results, but an object with a link, and by sending a GET request to the given address returns the results that have been completed so far and the state of the process. See GET /async_result/batch-import/{job_id}/

        Only one process is allowed at a time. If you need to stop a previous process, see DELETE /async_result/batch-import/{job_id}/



      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas_hide/CustomerDataPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerData'
                # example:
                #   $ref: '#/components/examples/response/value'

        '200 ':
          description: OK, response to async post
          content:
            application/json:
              schema:
                example:
                      {
                        "job_id": "892c88e2-4be7-4a43-8ac2-29038b4656d3",
                        "created": "2018-06-12T11:44:57.640693",
                        "results": [],
                        "state": "accepted",
                        "link": "https://api.vainu.io/api/v1/async_result/batch-import/892c88e2-4be7-4a43-8ac2-29038b4656d3/",
                        "progress": 0
                      }

        '400 ':
          description: Match parameter missing
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MATCH_PARAMETER_MISSING'
        '400   ':
          description: Invalid business id or insufficient country permissions
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/INVALID_BUSINESSID'
        '400    ':
          description: Match not found
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MATCH_NOT_FOUND'
        '400  ':
          description: Multiple possible matches
          content:
            application/json:
              schema:
                example:
                  status_code: 400
                  error_code: MULTIPLE_POSSIBLE_MATCHES
                  detail: 3 possible matches were found. A maximum of 100 are shown. Try to narrow down your search by giving more parameters.
                  possible_matches:
                    - country: US
                      domain: null
                      company_name: VAINU INC.
                      vid: 605731521
                      business_id: US_DE6240535
                    - country: US
                      domain: vainu.io
                      company_name: VAINU INC.
                      vid: 339608722
                      business_id: US_NY5058589
                    - country: FI
                      domain: vainu.io
                      company_name: Vainu Finland Oy
                      vid: 463880794
                      business_id: '28229966'

        '400      ':
          description: Match parameter missing
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MATCH_PARAMETER_MISSING'
        '400       ':
          description: Multiple possible matches for business id
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MULTIPLE_POSSIBLE_MATCHES_FOR_BUSINESS_ID'
        '409        ':
          description: Link already exists
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/LINK_ALREADY_EXISTS'
        '409         ':
          description: Async process already exists.
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/RUNNING_PROCESS_FOUND'

    get:
      summary: Get multiple customer_data objects
      operationId: Get multiple customer_data objects
      tags:
        - customer_data
      parameters:
        - $ref: '#/components/parameters/wdc'
        - $ref: '#/components/parameters/ldc'
        - $ref: '#/components/parameters/odc'
        - $ref: '#/components/parameters/won'
        - $ref: '#/components/parameters/uid'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/update'
        - $ref: '#/components/parameters/prospect'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas_hide/Page'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/INVALID_QUERY'

    patch:
      summary: Modify multiple customer_data objects
      operationId: Modify multiple customer_data objects
      description: >-
        Update all objects that match the query in the url. Returns objects that are found
        based on the query after modification. If the query includes fields that were modified,
        this will NOT return the modified objects, but what is found with a new query.

        This is equivalent to using PATCH on every object individually, except that changing the prospect is not possible.

        ### Warning: Doing this without any query parameters will modify EVERY customer_data object you have access to!!
      tags:
        - customer_data
      parameters:
        - $ref: '#/components/parameters/wdc'
        - $ref: '#/components/parameters/ldc'
        - $ref: '#/components/parameters/odc'
        - $ref: '#/components/parameters/won'
        - $ref: '#/components/parameters/uid'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/update'
        - $ref: '#/components/parameters/prospect'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas_hide/Page'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/INVALID_QUERY'

    delete:
      summary: Delete multiple customer_data objects
      operationId: Delete multiple customer_data objects
      description: >-
        Deletes all customer_data objects that match the query. You can use the GET method with the same query parameters to see what would be deleted

        ### Warning: Doing this without any query parameters will delete EVERY customer_data object you have access to!!
      tags:
        - customer_data
      parameters:
        - $ref: '#/components/parameters/wdc'
        - $ref: '#/components/parameters/ldc'
        - $ref: '#/components/parameters/odc'
        - $ref: '#/components/parameters/won'
        - $ref: '#/components/parameters/uid'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/update'
        - $ref: '#/components/parameters/prospect'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                example:
                  deleted: 2
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/INVALID_QUERY'
  '/async_result/batch-import/{job_id}/':

    parameters:
    - name: job_id
      in: path
      description: 'The id of the job'
      required: true
      schema:
        type: string
    get:
      tags:
        - async_result
      summary: Poll the status of an asynchronous task
      description: >-
                The response includes the results (with possible error codes) that have been completed so far and the state of the process.

                 Possible values for `state` are "process" (the process is running), "failure" (the process has failed), stopped" (the process has been stopped by the user) and "completed" (the process has completed).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                object:
                properties:
                  job_id:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        error:
                          type: string
                        id:
                          type: string
                        success:
                          type: boolean
                    description: An array describing the results that have been completed. Includes the same error codes as when creating single objects.
                  state:
                    type: string
                  link:
                    type: string
                  duration:
                    type: string
                  progress:
                    type: integer
                    description: percent completed
                example:
                    {"job_id":"2096be0a-817d-40b6-b743-cff45f777c21","created":"2018-06-15T11:47:39.479000","results":[{"match_parameters":{"exact_name":"Vainu Finland Oy"},"matched_prospect":{"country":"FI","domain":"vainu.io","company_name":"Vainu Finland Oy","vid":463880794,"business_id":"28229966"},"id":"5b237d31d3fee90010d1b1d4","success":true,"error":null},{"success":false,"matched_prospect":null,"existing_id":"5b237d31d3fee90010d1b1d4","match_parameters":{"exact_name":"Vainu Finland Oy"},"error":"MATCH_ALREADY_EXISTS","id":null},{"match_parameters":{"business_id":"324-123"},"matched_prospect":null,"id":null,"success":false,"error":"INVALID_BUSINESSID"},{"max_number_of_matches_shown":100,"success":false,"matched_prospect":null,"match_parameters":{"normalize_name":"vainu"},"possible_matches":[{"country":"US","domain":null,"company_name":"VAINU INC.","vid":605731521,"business_id":"US_DE6240535"},{"country":"FI","domain":"vainu.io","company_name":"Vainu Finland Oy","vid":463880794,"business_id":"28229966"},{"country":"US","domain":"vainu.io","company_name":"VAINU INC.","vid":339608722,"business_id":"US_NY5058589"}],"number_of_matches":3,"error":"MULTIPLE_POSSIBLE_MATCHES","id":null}],"state":"completed","link":"https:\/\/api.vainu.io\/api\/v1\/async_result\/batch-import\/2096be0a-817d-40b6-b743-cff45f777c21\/","duration":"7.14","progress":100}
                    # request to get example: [{"exact_name": "Vainu Finland Oy"},{"exact_name": "Vainu Finland Oy"},{"business_id": "324-123"},{"normalize_name": "vainu"}]

            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerData'
    delete:
      tags:
        - async_result
      summary: Stop an asynchronous task
      description: >-
        Stops the asynchronous task specified by `job_id`. Returns the state of the task like with GET, but `state` is now "stopped".


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  {"job_id":"b1fd98ea-c575-4773-b995-74187facf042","created":"2018-06-13T10:11:13.885000","results":[{"match_parameters":{"exact_name":"Vainu Finland Oy"},"matched_prospect":{"country":"FI","domain":"vainu.io","company_name":"Vainu Finland Oy","vid":463880794,"business_id":"28229966"},"id":"5b237d31d3fee90010d1b1d4","success":true,"error":null},{"success":false,"matched_prospect":null,"existing_id":"5b237d31d3fee90010d1b1d4","match_parameters":{"exact_name":"Vainu Finland Oy"},"error":"MATCH_ALREADY_EXISTS","id":null}],"state":"stopped","link":"https:\/\/api.vainu.io\/api\/v1\/async_result\/batch-import\/b1fd98ea-c575-4773-b995-74187facf042\/","progress":67}
  '/customer_data/{id}/':
    get:
      tags:
        - customer_data
      summary: Get customer_data object by id
      description: Get the customer_data object specified by the `id`.
      operationId: Get customer_data object by id
      parameters:
        - name: id
          in: path
          description: 'The id of the object to get'
          required: true
          schema:
            type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerData'
        '404':
          description: Not found
    patch:
      tags:
        - customer_data
      summary: Modify customer_data object
      description: Modify a customer_data object. If match parameters are included, will try to make a new match.
      operationId: Modify customer_data object
      parameters:
        - name: id
          in: path
          description: The id of the object that needs to be modified.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas_hide/CustomerDataPost'

      responses:
        '200':
          description: OK
        '400   ':
          description: Invalid business id or insufficient country permissions
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/INVALID_BUSINESSID'

        '400    ':
          description: Match not found
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MATCH_NOT_FOUND'


        '400  ':
          description: Multiple possible matches
          content:
            application/json:
              schema:
                example:
                  {
                    "status_code": 400,
                    "error_code": "MULTIPLE_POSSIBLE_MATCHES",
                    "detail": "3 possible matches were found. A maximum of 100 are shown. Try to narrow down your search by giving more parameters.",
                    "possible_matches": [
                        {
                            "country": "US",
                            "domain": null,
                            "company_name": "VAINU INC.",
                            "vid": 605731521,
                            "business_id": "US_DE6240535"
                        },
                        {
                            "country": "US",
                            "domain": "vainu.io",
                            "company_name": "VAINU INC.",
                            "vid": 339608722,
                            "business_id": "US_NY5058589"
                        },
                        {
                            "country": "FI",
                            "domain": "vainu.io",
                            "company_name": "Vainu Finland Oy",
                            "vid": 463880794,
                            "business_id": "28229966"
                        }
                    ]
                }

        '400      ':
          description: Match parameter missing
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MATCH_PARAMETER_MISSING'
        '400       ':
          description: Multiple possible matches for business id
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/MULTIPLE_POSSIBLE_MATCHES_FOR_BUSINESS_ID'
        '409        ':
          description: Link already exists
          content:
            application/json:
              schema:
                example:
                  $ref: '#/components/examples/LINK_ALREADY_EXISTS'

        '404':
          description: Not found
          content:
            application/json:
              schema:
                example:
                  {detail: Not found}
    delete:
      tags:
        - customer_data
      summary: Delete customer_data object
      description: Delete the customer_data object specified by the `id`.
      operationId: Delete customer_data object

      parameters:
        - name: id
          in: path
          description: The id of the object that needs to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Not found
  '/prospect/{BUSINESS_ID_without_dash}/':
    parameters:
      - name: BUSINESS_ID_without_dash
        in: path
        description: 'The business id. For example: `FI09704098`'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - prospect
      summary: Prospect Basic Information
      description:  Get basic information about a prospect.
      operationId: Prospect Basic Information


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  { "business_id": "09704098", "status": "active", "registration_date": "1994-6-8", "company_name": "Oy Samlink Ab", "link": "www.samlink.fi", "phone": "09548050", "industry_code_2": 62, "industry_code_5": 62010, "industry_code": "62010", "address": "Linnoitustie 9", "postal": "02600", "city": "ESPOO", "visiting_address": "Linnoitustie 9", "visiting_postal": "02600", "visiting_city": "ESPOO", "country": "FI", "turn_over": "93116557.0", "turn_over_local": null, "turnover_estimate": null, "profit": "8.0", "development_of_turnover": "4.2", "staff_number": "399", "staff_number_is_estimate": false, "vainu_link": "https://app.vainu.io/vainu/prospect/253870/", "linkedin_id": "43072", "twitter_link": "http://twitter.com/khttps://twitter.com/Samlink_Oy?lang=firiesi", "facebook_link": "https://www.facebook.com/Samlinkoy/?fref=ts", "technologies": [ "Apache", "Google analytics", "Wordpress", "Fi", "En", "Sv", "Wordpress 4", "Flash", "Nb", "Wordpress super cache", "Sonera.net", "Jquery 1.11.3", "Twitter", "Youtube", "_(\"BLOG\")", "Www", "Javascript", "Jquery", "Sonera.fi", "Vimeo", "_(\"RESPONSIVE\")", "Facebook", "Doubleclick", "Google maps", "Google font api", "Dropbox", "_(\"OWN_EMAIL_SERVER\")", "Php", "un", "Yammer" ], "digitality": 0.1, "sociality": 0.1, "marketility": 0.05, "alexa_rank_global": 940296, "mother": null, "mother_foreign": null, }
        '404':
          description: Not found
  '/prospect/{BUSINESS_ID_without_dash}/all/':
    parameters:
      - name: BUSINESS_ID_without_dash
        in: path
        description: 'The business id. For example: `FI09704098`'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - prospect
      summary: Prospect All Information
      description:  Get prospect basic information, financial data and contacts with single API call.
      operationId: Prospect All Information


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  { "business_id": "09704098", "status": "active", "registration_date": "1994-6-8", "company_name": "Oy Samlink Ab", "link": "www.samlink.fi", "phone": "09548050", "industry_code_2": 62, "industry_code_5": 62010, "isic_industry_code": "62010", "address": "Linnoitustie 9", "postal": "02600", "city": "ESPOO", "visiting_address": "Linnoitustie 9", "visiting_postal": "02600", "visiting_city": "ESPOO", "country": "FI", "turn_over": "93116557.0", "turn_over_local": null, "turnover_estimate": null, "profit": "8.0", "development_of_turnover": "4.2", "staff_number": "399", "staff_number_is_estimate": false, "vainu_link": "https://app.vainu.io/vainu/prospect/253870/", "linkedin_id": "43072", "twitter_link": "http://twitter.com/khttps://twitter.com/Samlink_Oy?lang=firiesi", "facebook_link": "https://www.facebook.com/Samlinkoy/?fref=ts", "financial_statements": [ { "year": 2014, "currency_code": "EUR", "turn_over_eur": "11111000.0", "turn_over_local": null, "turn_over_is_estimate": false, "development_of_turnover": "1.1", "staff_number": 111, "net_income_euro": "11110.0", "net_income_local": null, "equity_to_assets_ratio": "11.1", "account_period_start": null, "account_period_end": "2014-12-31" }, { "year": 2012, "currency_code": "EUR", "turn_over_eur": "22222.0", "turn_over_local": null, "turn_over_is_estimate": false, "development_of_turnover": "2.2", "staff_number": 2222, "net_income_euro": "222200.0", "net_income_local": null, "equity_to_assets_ratio": "22.0", "account_period_start": null, "account_period_end": "2012-12-31" }, ... ], "contacts": [ { "first_name": "John", "last_name": "Doe", "email": "john@example.com", "phone": null, "title": "CTO" }, { "first_name": "Jane", "last_name": "Doe", "email": "jane@example.com", "phone": "+123123123123", "title": "CEO" }, ], "prospect_addresses": [ { "visiting_address": "Visiting street address", "visiting_postal": "12345", "visiting_city": "HELSINKI", "address": "Post address 3", "postal": "00180", "city": "HELSINKI", "office_number": null, "office_name": null, "business_id": null }, .. ], "description": "Companys description of them selves.", "digitality": 0.1, "sociality": 0.1, "marketility": 0.05, "alexa_rank_global": 940296, "mother": null, "mother_foreign": null }
        '404':
          description: Not found
  '/prospect/{BUSINESS_ID_without_dash}/leads/':
    parameters:
      - name: BUSINESS_ID_without_dash
        in: path
        description: 'The business id. For example: `FI09704098`'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - prospect
      summary: Prospect Leads
      description:  Returns leads for prospect from the previous 90 days.
      operationId: Prospect Leads


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  [ { "prospects": [ { "business_id": "25578642", "company_name": "WithinSights Oy" }, { "business_id": "01011385", "company_name": "Tieto Oyj" }, ], "added": "2015-08-20T08:52:50", "title": "Tieto ja Sibelius-Seura yhteisty\u00f6h\u00f6n ", "link": "http://www.marmai.fi/uutiset/tieto+ja+sibeliusseura+yhteistyohon/a2319760", "tags": [ "Kumppanuudet ja yhteisty\u00f6projektit" ], "vainu_link": "https://app.vainu.io/vainu/prospect/108324" }, { "prospects": [ { "business_id": "01011385", "company_name": "Tieto Oyj" }, ], "added": "2015-08-18T06:00:00", "title": "Tieto and First Investment Bank launch in-house acquiring", "link": "http://news.cision.com/tieto-oyj/r/tieto-and-first-investment-bank-launch-in-house-acquiring,c9814811", "tags": [ "Organisaatiomuutokset" ], "vainu_link": "https://app.vainu.io/vainu/prospect/108324" }, { "prospects": [ { "business_id": "01011385", "company_name": "Tieto Oyj" }, ], "added": "2015-08-17T19:48:44", "title": "Amerikkalainen Epic voitti suomalaisen Apotti-kilvassa", "link": "http://www.talouselama.fi/uutiset/amerikkalainen+epic+voitti+suomalaisen+apottikilvassa/a2319298", "tags": [ "Projektit" ], "vainu_link": "https://app.vainu.io/vainu/prospect/108324" }, ... ]
        '404':
          description: Not found
  '/prospect/{BUSINESS_ID_without_dash}/contacts/':
    parameters:
      - name: BUSINESS_ID_without_dash
        in: path
        description: 'The business id. For example: `FI09704098`'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - prospect
      summary: Prospect Contacts
      description:  Returns the contacts of a prospect.
      operationId: Prospect Contacts


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  [ { "first_name": "Toivo", "last_name": "Toimitusjohtaja", "email": "toivo.toimitusjohtaja@samlink.fi", "phone": "", "title": "Toimitusjohtaja", "prospect": "Yritys Oy" }, { "first_name": "Anni", "last_name": "Annisuku", "email": "anni.annisuku@example.com", "phone": "0501234123", "title": "Asiakkuusjohtaja", "prospect": "Yritys Oy" }, ... ]
        '404':
          description: Not found
  '/prospect/{BUSINESS_ID_without_dash}/financial_statements/':
    parameters:
      - name: BUSINESS_ID_without_dash
        in: path
        description: 'The business id. For example: `FI09704098`'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - prospect
      summary: Prospect Financial Statements

      description:  Get yearly financial data of prospect.
      operationId: Prospect Financial Statements


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  [ { "year": 2014, "currency_code": "EUR", "turn_over_eur": "7035193000.0", "turn_over_local": null, "turn_over_is_estimate": false, "development_of_turnover": "14.3", "staff_number": 6198, "net_income_euro": "2077084000.0", "net_income_local": null, "equity_to_assets_ratio": "58.7", "account_period_start": null, "account_period_end": null }, { "year": 2013, "currency_code": "EUR", "turn_over_eur": "6153660833.0", "turn_over_local": null, "turn_over_is_estimate": false, "development_of_turnover": "-12.2", "staff_number": 5998, "net_income_euro": "-42387687.0", "net_income_local": null, "equity_to_assets_ratio": "36.5", "account_period_start": null, "account_period_end": null }, ... ]
        '404':
          description: Not found

  '/prospects/filter/':
    parameters:
      - name: business_id
        in: query
        description: 'Filter'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - prospects filter
      summary: Prospect Filter
      description: >-

        Filter prospects using a simple API.


        For best performance include the country filter in your filter query.


        ### Supported filter types:


        - __gte = Value greater or equal

        - __gt = Value greater

        - __lte = Value less or equal

        - __lt = Value less

        - __exact = Exact string match

        - __startswith = String startswith this value

        - __in = Value matches one element of comma separated list

        - __ne = Exclude value. Use "null" for filtering out "non existing value" (value__ne=null).


        No filter type is an wildcard match \*Test\*

        ### Supported fields for filtering:

        business_id, registration_date, company_name, link, domain, phone, industry_code_2, industry_code_5, isic_industry_code, address, postal, city, country, municipality, visiting_address, visiting_city, visiting_postal, visiting_municipality, turn_over, profit, development_of_turnover, staff_number, nstatus

        ### Sorting

        Sorting is specified with ‘order’ GET parameter. Sorting is possible with all the fields that support for filtering. Ascending order can be specified with a leading ‘-‘ character.


        Fast sorting (ascending or descending) is supported with fields: business_id, company_name, visiting_postal, visiting_city , business_id, vainu_score, turn_over, alexa_rank_global.




        ### Null value sort behaviour

        Null values are sorted to the beginning of ascending sort order and to the end of descending sort order. Null values can be excluded with `value__ne=null` filter.

        ### Examples:


        - Industry code 87301 and sort with ascending turnover:
          - https://api.vainu.io/api/v1/prospects/filter/?country=FI&industry_code=87301&order=-turn_over

        - Industry code 87301 and sort with descending turnover:
          - https://api.vainu.io/api/v1/prospects/filter/?country=FI&industry_code=87301&order=turn_over

        - Industry code 87301 and sort with ascending staff. Exclude null values:

          - https://api.vainu.io/api/v1/prospects/filter/?country=FI&industry_code=87301&staff_number__ne=null&order=staff_number

        ### Count

        Get the total number of results with parameter `?count=true` or include the count in the results with `count=include`. Including the count in the results will cause the query to be 1.5-2 times slower.


        ### Limit and offset

        Limit / offset can be specified with GET parameters limit / offset.


        - Industry code 87301 with 30 results from the 20th result onward:

          - https://api.vainu.io/api/v1/prospects/filter/?industry_code=87301&limit=30&offset=20


        ### Region filtering


        FIlter regions with [ISO 3166-2 standard](https://en.wikipedia.org/wiki/ISO_3166-2).

        Example ISO 3166-2 areas for Nordics:

        - [Finland](https://en.wikipedia.org/wiki/ISO_3166-2:FI)

        - [Sweden](https://en.wikipedia.org/wiki/ISO_3166-2:SE)

        - [Norway](https://en.wikipedia.org/wiki/ISO_3166-2:NO)

        - [Denmark](https://en.wikipedia.org/wiki/ISO_3166-2:DK)


        Example query:

        - https://api.vainu.io/api/v1/prospects/filter/?country=FI&region__exact=FI-18&count=include

        ### Company status queries

        Filtering out inactive companies can be done by using the nstatus (Normalized status) filtering parameter.

         Definitions:

        - status: Readable status we have received from one of our data sources

        - nstatus: Normalized status with either active or inactive value

        Examples:

        - Filter Swedish companies with postal code range 50000-51019 that are active:

          - https://api.vainu.io/api/v1/prospects/filter/?visiting_postal=50000-51019&limit=20&country=SE&nstatus=active

        - Filter Swedish companies with postal code range 50000-51019 that are inactive:

          - https://api.vainu.io/api/v1/prospects/filter/?visiting_postal=50000-51019&limit=20&country=SE&nstatus=inactive

        ### Address and postal code queries

        For best results we recommend filtering companies with address is using the visiting_ fields ( visiting_address, visiting_city, visiting_postal). If our data has no visiting address but we have a regular address, the regular address is copied to visting address data.



        - Range query with postal code:

          - https://api.vainu.io/api/v1/prospects/filter/?visiting_postal=50000-51019&limit=20&country=SE

        - Postal code is exactly 90500:

          - https://api.vainu.io/api/v1/prospects/filter/?visiting_postal__exact=90500&country=FI

        - Postal code startswith 905:

          - https://api.vainu.io/api/v1/prospects/filter/?visiting_postal__startswith=905&country=FI

        - Postal code is exactly 90500 or 90510:

          - https://api.vainu.io/api/v1/prospects/filter/?visiting_postal__in=90500,90510&country=FI

        ### Industry codes queries

        Use industry_codes field to filter with industry_code. Field uses the local value of the industry code spesific to the country. The first value of the list represents the primary industry code.


        Fields industry_code_2, industry_code_5 and industry_code will be depricated in the next version of the API.


        Local formats for countries:


        - Finland (FI): TOL 2008 (http://www.stat.fi/meta/luokitukset/toimiala/001-2008/index_en.html)


        - Sweden (SE): SNI 2007 (http://www.scb.se/en_/Documentation/Classifications-and-standards/Swedish-Standard-Industrial-Classification-SNI/)

        - Norway (NO): SIC 2007 (http://www.ssb.no/en/klass/#!/klassifikasjoner/6)

        - Denmark (DK) Dansk Branchekode 2007 http://www.dst.dk/en/Statistik/dokumentation/Nomenklaturer/DB

        - Netherlands (NL) (spefication coming soon..)


        Examples


        - Get 20 companies with the biggest turn over with finnish industry code 60xxx.

          - https://api.vainu.io/api/v1/prospects/filter/?country=FI&industry_codes__startswith=60&limit=20&order=-turn_over

        - Get 20 companies with the biggest turn over with finnish industry 60201 (Television programming and broadcasting activities (excl. pay television channels)

          - https://api.vainu.io/api/v1/prospects/filter/?country=FI&industry_codes__startswith=60201&limit=20&order=-turn_over

        ### Filtering examples:

        Parameters can be GET parameters or POST payload.


        - Filter with business IDs: 0970409-8,0357502-9,2127346-2:
          - https://api.vainu.io/api/v1/prospects/filter/?business_ids=09704098,03575029,21273462

        - Companies with “Vainu” in their company_name:
          - https://api.vainu.io/api/v1/prospects/filter/?company_name=Vainu&country=FI&limit=20

        - Companies with exact company name “Nokia Oyj”:
          - https://api.vainu.io/api/v1/prospects/filter/?company_name__exact=Nokia Oyj&country=FI

        - Companies with turnover between 500000-510000 :
          - https://api.vainu.io/api/v1/prospects/filter/?turn_over__gte=50000&turn_over__lte=51000

        - Business ID is 01966341,01119767,09120738,24444888 AND basic information has been updated since 20.4.2016 16:00:
          - https://api.vainu.io/api/v1/prospects/filter/?basic_modified__gt=2016-04-20T16:00:00&business_ids=01966341,01119767,09120738,24444888




      operationId: Prospect Filter


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  [ { "business_id": "25578642", "status": "active", "registration_date": "2013-8-7", "company_name": "Vainu. io Software Oy", "link": "vainu.io", "phone": "+358 40 8341005", "industry_code_2": 62, "industry_code_5": 62010, "industry_code": "62010", "address": "Arkadiankatu 6 D", "postal": "00100", "city": "HELSINKI", "municipality": "HELSINKI", "visiting_address": "Arkadiankatu 6 D", "visiting_postal": "00100", "visiting_city": "HELSINKI", "visiting_municipality": "HELSINKI", "country": "FI", "currency_code": "SEK", "turn_over": "604000.0", "turn_over_local": null, "turn_over_is_estimate": false, "profit": "3.2", "development_of_turnover": "2007.0", "staff_number": "12", "staff_number_is_estimate": false, "vainu_link": "https://app.vainu.io/vainu/prospect/708216/", "linkedin_id": "3803996", "twitter_link": "https://twitter.com/vainuio", "facebook_link": "https://www.facebook.com/vainuio/" }, { "business_id": "1231234", "status": "active", "registration_date": "2013-12-10", "company_name": "Examply Oy", "link": "www.example.com", "phone": null, "industry_code_2": 96, "industry_code_5": 96090, "industry_code": "96090", "address": "Street 3", "postal": "12345", "city": "HELSINKI", "municipality": "HELSINKI", "visiting_address": "Street 3", "visiting_postal": "12345",  "visiting_city": "HELSINKI", "visiting_municipality": "HELSINKI", "country": "FI", "currency_code": "SEK", "turn_over": null, "turn_over_local": null, "turn_over_is_estimate": false, "profit": null, "development_of_turnover": null, "staff_number": null, "staff_number_is_estimate": false, "vainu_link": "https://app.vainu.io/vainu/prospect/702931/", "linkedin_id": null, "twitter_link": null, "facebook_link": "https://www.facebook.com/..." }, .... ]
        '404':
          description: Not found

  '/target_groups/':
    get:
      tags:
        - target_groups
      summary: List Target Groups
      description:  Returns user's target groups as a list with name and id.


      operationId: List Target Groups


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example: [ { "id": "12341234ab70b42bffd6a713", "name": "Target Group 1", "is_named_target_group": false, "default": false }, { "id": "12341234ab70b40e0875f685", "name": "Portfolio", "is_named_target_group": true, "default": false } ]
        '404':
          description: Not found
    post:
      tags:
        - target_groups
      summary: Create Target Group
      description: "Create target group. Optional parameter: is_named_target_group, default: true"
      operationId: Create Target Group
      requestBody:
        content:
          application/json:
            schema:
              example: { "name": "New Portfolio", "is_named_target_group": true}


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  { "id": “12341234ab70b40e0875f685", "name": "New Portfolio", "is_named_target_group": true, "default": false }
        '404':
          description: Not found
  '/target_groups/{target_group_id}':
    parameters:
      - name: target_group_id
        in: path
        description: 'The id of the object to get.'
        required: true
        schema:
          type: string
        example: FI09704098
    get:
      tags:
        - target_groups
      summary: Get Single Target Group
      description:  Prospect Basic Information
      operationId: Get Single Target Group


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  { "id": "12341234ab70b40e0875f685", "name": "New Portfolio", "is_named_target_group": true, "default": false }
        '404':
          description: Not found
    put:
      tags:
        - target_groups
      summary: Update Target Group
      description:  >-
        Special Parameters:


        - business_ids: Add prospects to portfolio with business_id. (Only for target groups that are portfolio type (is_named_target_group == true)

        - company_names: Add prospects with company name to portfolio


      operationId: Update Target Group
      requestBody:
        content:
          application/json:
            schema:
              example: { "name": "New Portfolio Updated", "business_ids": ["25578642", "01141622"], "company_names": ["Nokia Solutions and Networks Oy","UPM-Kymmene Oyj"]}


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  { "id": "12341234ab70b40e0875f685", "name": "New Portfolio Updated", "is_named_target_group": true, "default": false }
        '404':
          description: Not found
    # delete:
    #   tags:
    #     - target_groups
    #   summary: Prospect Basic Information API
    #   description:  Prospect Basic Information API
    #   operationId: deleteTargetGroups


    #   responses:
    #     '200':
    #       description: OK
    #       content:
    #         application/json:
    #           schema:
    #             example:
    #     '204':
    #       description: No content
  '/target_group/{target_group_id}/':
    parameters:
      - name: target_group_id
        in: path
        description: 'The id of the object to get.'
        required: true
        schema:
          type: string
        example: FI09704098

    get:
      parameters:
        - name: count
          in: query
          description: When not included, returns the count and results. When included and true, returns only the count, and when included and false, returns only the results. Returning only the results is faster than returning the results and count.
          required: false
          schema:
            type: boolean
        - name: limit
          in: query
          description: The maximum number of prospects to return. Default is 20. Can be disabled with `limit=none` .
          required: false
          schema:
            type: integer
          default: 20
        - name: offset
          in: query
          description: Offset for pagination.
          required: false
          schema:
            type: integer
      tags:
        - target_group
      summary: Target Group Prospects
      description:  >-
        Get the prospects in the target group.




      operationId: Target Group Prospects


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  { "count": 68520, "results": [ { "business_id": "01032880", "company_name": "AAC Global Oy", "link": "http://www.aacglobal.com", "isic_industry_code": "85593", "address": "Porkkalankatu 20 C", "postal": "00180", "city": "HELSINKI", "country": "FI", "turn_over": "13026000.0", "staff_number": "112", "development_of_turnover": "-6.7", "profit": "5.9" }, { "business_id": "21619427", "company_name": "3Step IT Oy", "link": "http://www.3stepit.com/fi", "isic_industry_code": "62010", "address": "Mechelininkatu 1 A", "postal": "00180", "city": "HELSINKI", "country": "FI", "turn_over": "276148973.0", "staff_number": "74", "development_of_turnover": "20.8", "profit": "6.4" }, ... ] }
        '404':
          description: Not found
  '/target_group/{target_group_id}/leads/':
    parameters:
      - name: target_group_id
        in: path
        description: 'The id of the object to get.'
        required: true
        schema:
          type: string
        example: FI09704098
      - name: from_datetime
        in: query
        description: Return all leads from a datetime (ISO_8601 formatted) to now. Valid values are ISO_8601 datetimes between now and (now - 60 days)


        required: false
        schema:
          type: string
    get:
      tags:
        - target_group
      summary: Target Group Leads
      description:  >-
        #

        ### Example URLs:

        - https://api.vainu.io/api/v1/target_group/123456/leads/

        - https://api.vainu.io/api/v1/target_group/123456/leads/?from_datetime=2015-11-18

        - https://api.vainu.io/api/v1/target_group/123456/leads/?from_datetime=2015-11-18T15:00:00


        Latest feeds for Target Group.


        Get the Target Group ID with Target Groups API.


        Without from_datetime argument, Leads from the previous day (00:00) to this moment will be returned for Target Group.




      operationId: Target Group Leads


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  [ { "id": 1231234, "prospects": [ { "business_id": "01080233", "company_name": "Finnair Oyj" } ], "datetime": "2015-12-04T13:18:43.611", "title": "Positiivinen tulosjulkistus Finnairilta", "link": "http://www.linkki.fi/liidi/", "tags": [ "Tulosjulkistus - positiivinen" ], "vainu_link": "https://app.vainu.io/vainu/prospect/1214074" }, { "id": 1231235, "prospects": [ { "business_id": "01080233", "company_name": "Finnair Oyj" } ], "datetime": "2015-12-04T13:18:43.611", "title": " Fuusio Finnair ja Testi yrityksen välillä", "link": "http://www.toinenlinkki.fi/liidi/", "tags": [ "Fuusiot, jakautumiset, yrityskaupat" ], "vainu_link": "https://app.vainu.io/vainu/prospect/1214074" }, ... ]
        '404':
          description: Not found


# externalDocs:
#   description: External docs
#   url: 'http://vainu.io'


  '/enrich_data/':
    post:
      tags:
        - enrich_data
      description:   >-
        This endpoint allows you to enrich your company data with data from Vainu.


        The endpoint takes in data about a company in the post body, and attempts to find a matching company in the Vainu database.


        If a match is found, all related information about the company is returned.


        If multiple matches are found, a list containing basic information about them and a unique identifier (vid, or Vainu id) is returned. The user then needs to select the correct entity and re-request the endpoint with the company's unique vid identifier. Note: using the vid in the results always returns a single correct match.


        ### Matching parameters:

        Include matching parameters in the request body. Note: current implementation requires that the fields used for matching are correctly named. At least one field marked with an asterisk* is required. These fields include:


        - company_name*

        - business_id*

        - vid*

        - country

        - domain

      operationId: Match and retrieve company data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                company_name:
                  type: string
                business_id:
                  type: string
                vid:
                  type: integer
                country:
                  type: string
                domain:
                  type: string
              example: {
                "company_name": "Rovio Entertainment Oyj",
                "business_id": None,
                "country": "FI"
              }


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:  {'business_id': '01098628',
                   'company_name': 'Kesko Oyj',
                   'nstatus': 0,
                   'turn_over_local': 4546014550.0,
                   'youtube_link': 'http://www.youtube.com/keskovideot',
                   'leads':  [{'datetime': None,
                     'id': None,
                     'link': 'http://www.riihimaki.fi/ilmoitus-naapureille-rakennuslupahakemuksen-vireilletulosta-kuulutus-nahtavilla-23-1-2018-saakka/',
                     'prospects': [],
                     'tags': None,
                     'title': 'Ilmoitus naapureille rakennuslupahakemuksen vireilletulosta (kuulutus on n\xe4ht\xe4vill\xe4 23.1.2018 saakka)',
                     'vainu_link': ''},
                    {'datetime': None,
                     'id': None,
                     'link': 'http://ted.europa.eu/udl?uri=TED:NOTICE:018035-2018:TEXT:FI:HTML',
                     'prospects': [],
                     'tags': None,
                     'title': 'Elintarvikkeet',
                     'vainu_link': ''},
                    {'datetime': None,
                     'id': None,
                     'link': 'http://paikat.te-palvelut.fi/tpt//9451541?rss=true',
                     'prospects': [],
                     'tags': None,
                     'title': 'Kokki, Matti Himberg Oy, K-citymarket Vantaa Jumbo, Vantaa',
                     'vainu_link': ''}
                    ],
                    additional_fields: "..."
                  }

components:
  parameters:
    odc:
      in: query
      name: open_deals_count
      description: Filter
      schema:
        type: integer
    wdc:
      in: query
      name: won_deals_count
      description: Filter
      schema:
        type: integer
    ldc:
      in: query
      name: lost_deals_count
      description: Filter
      schema:
        type: integer
    won:
      in: query
      name: won
      description: Filter
      schema:
        type: boolean
    uid:
      in: query
      name: unique_id
      description: Filter
      schema:
        type: string
    email:
      in: query
      name: owner_email
      description: Filter
      schema:
        type: string
    update:
      in: query
      name: last_update
      description: Filter
      schema:
        type: string
    prospect:
      in: query
      name: prospect
      description: Filter by vid
      schema:
        type: string

  examples:
    pe_post:
        owner_email: example@vainu.io
        won_deals_count: 2
        open_deals_count: 1
        lost_deals_count: 0
        vid: 463880794
        exact_name: Vainu Finland Oy
        business_id: 2822996-6
        country: FI
        unique_id: f39a1a59
        last_update: '2018-06-08'
    response:
        owner_email: response@vainu.io
        won_deals_count: 2
        open_deals_count: 1
        lost_deals_count: 0
        # vid: 463880794
        # unique_id: f39a1a59
        # last_update: '2018-06-08T12:30:39.923Z'
        # id: 2b1961522a6e7f19c3e5ac08
    prospect:
        vid: 463880794
        company_name: Vainu Finland Oy
        business_id: '2822996-6'
        country: FI
        domain: vainu.io

    MATCH_PARAMETER_MISSING:
        status_code: 400
        error_code: MATCH_PARAMETER_MISSING
        detail: Please provide a match parameter.

    INVALID_BUSINESSID:
        status_code: 400
        error_code: INVALID_BUSINESSID
        detail: Business id is invalid or insufficient country permissions for the business id

    MATCH_NOT_FOUND:
        status_code: 400
        error_code: MATCH_NOT_FOUND
        detail: Could not find match

    LINK_ALREADY_EXISTS:
        status_code: 409
        error_code: MATCH_ALREADY_EXISTS
        detail: A match for these parameters already exists
        id: 5b22525a4a6e7f04665b7e2a

    MULTIPLE_POSSIBLE_MATCHES_FOR_BUSINESS_ID:
        status_code: 400
        error_code: MULTIPLE_POSSIBLE_MATCHES_FOR_BUSINESS_ID
        detail: The given business id could be matched to a business id in multiple countries. Use the 'country' parameter to filter your results




    CANNOT_MODIFY_PROSPECT_DIRECTLY:
        status_code: 400
        error_code: CANNOT_MODIFY_PROSPECT_DIRECTLY
        detail: Do not modify the prospect directly. Use a matching parameter instead.




    INVALID_QUERY:
        status_code: 400
        error_code: INVALID_QUERY
        detail: 'Invalid query: invalid_query=abcd'


    NOT_FOUND:
        detail: Not found

    RUNNING_PROCESS_FOUND:
        status_code: 409
        error_code: RUNNING_PROCESS_FOUND
        detail: Process in a running or pending state found. Please wait for it to complete or stop it manually.
        id: 8a884084-5cee-4f1f-af4c-00bac78fae42


  # responses:
  #   NotFound:
  #     description: The specified resource was not found
  #     content:
  #       application/json:
  #         schema:
  #           # $ref: '#/components/schemas_hide/error'
  #           example:
  #             status_code: 404
  #             error_code: NOT_FOUND
  #             detail: CustomerData not found


  #   Unauthorized:
  #     description: Unauthorized
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas_hide/error'

  schemas_hide:
    CustomerDataPost:
      allOf:
        - $ref: '#/components/schemas_hide/CustomerDataData'
        - type: object
          properties:


            vid:
              example: 463880794
              type: integer
              description: Matching parameter.
            exact_name:
              type: string
              example:  Vainu Finland Oy
              description: Matching parameter.
            normalize_name:
              type: string
              example:  vainu
              description: Matching parameter.
            business_id:
              type: string
              example:  2822996-6
              description: Matching parameter.
            country:
              type: string
              example:  FI
              description: Matching parameter.
    CustomerDataData:
      type: object
      properties:
        owner_email:
          type: string
          example: example@vainu.io
        unique_id:
          type: string
          example: f39a1a59
          description: An id that can be used to reference a prospect in another system.
        won_deals_count:
          type: integer
          example: 2
          description: Can be used to indicate the status of the prospect. Shown in Vainu user interface.
        open_deals_count:
          type: integer
          example: 1
          description: Can be used to indicate the status of the prospect. Shown in Vainu user interface.
        lost_deals_count:
          type: integer
          example: 0
          description: Can be used to indicate the status of the prospect. Shown in Vainu user interface.
        notes:
          type: string
          description: Include any information about the prospect.
        last_update:
          type: string
          format: date-time
          example: '2018-06-08'
          description: Indicate when the prospect was last updated in an external system. Shown in Vainu user interface.
    Page:
      allOf:
        - type: object
          properties:
            total_results:
              type: integer
              example: 1
            next_page:
              type: string
              format: uri
              example: https://api.vainu.io/api/v1/customer_data/?page=2
            prev_page:
              type: string
              format: uri
              example: null
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CustomerData'

  schemas:
    CustomerData:
      allOf:
        - $ref: '#/components/schemas_hide/CustomerDataData'
        - type: object
          properties:
            won:
              type: boolean
              description: True if won_deals_count is greater than zero
            origin:
              type: string
              example: PublicApi
            modified:
              type: string
              format: date-time
              example: '2018-06-09T12:30:39.923Z'
            created:
              type: string
              format: date-time
              example: '2018-06-09T12:20:21.341Z'
            prospect_info:
              type: object
              properties:
                vid:
                  type: integer
                  example: 463880794
                company_name:
                  type: string
                  example: Vainu Finland Oy
                business_id:
                  type: string
                  example: '2822996-6'
                country:
                  type: string
                  example: FI
                domain:
                  type: string
                  example: vainu.io
            id:
              type: string
              example: 2b1961522a6e7f19c3e5ac08
            prospect:
              type: integer
              example: 463880794
              description: vid





    # MATCH_PARAMETER_MISSING:
    #   type: object
    #   properties:
    #     ERROR_CODE:
    #       type: string
    #       example:
    #       enum: [MATCH_PARAMETER_MISSING, INVALID_BUSINESSID, MATCH_NOT_FOUND, LINK_ALREADY_EXISTS]
    #     detail:
    #       type: string

      # required:
      #   - ERROR_CODE
      #   - message

  securitySchemes:
    # petstore_auth:
    #   type: http
    #   scheme: basic

    basic:
      type: http
      scheme: basic

    API-Key:
      type: apiKey
      name: API-Key
      in: header
